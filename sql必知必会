----------------------------------------------------
-- 数据库：表 表名 列 行 主键
----------------------------------------------------

----------------------------------------------------
-- 检索数据：SELECT

-- 单个列
SELECT prod_name
FROM Products;

-- 多个列
SELECT prod_name,prod_id,prod_price
FROM Products;

-- 所有列
SELECT *
FROM Products;

-- 不同值
SELECT vend_id
FROM Products;

SELECT DISTINCT vend_id
FROM Products;

-- 限制结果
SELECT prod_name
FROM Products;

SELECT TOP 5 prod_name
FROM Products;

----------------------------------------------------

----------------------------------------------------
-- 注释
/* 注释
SELECT TOP 5 prod_name
FROM Products;
*/
----------------------------------------------------

----------------------------------------------------
-- 2.9 挑战题
-- 1
SELECT cust_id
FROM Customers;

-- 2
SELECT DISTINCT prod_id
FROM OrderItems;

-- 3
/*
SELECT *
FROM Customers;
*/
SELECT cust_id
FROM Customers;
----------------------------------------------------

----------------------------------------------------
-- 排序检索:ORDER BY

-- 排序数据
SELECT prod_name
FROM Products;

SELECT prod_name
FROM Products
ORDER BY prod_name;
/* ORDER BY 必须为最后的子句 可以通过非检索的列排序数据 */

-- 按多个列排序
SELECT prod_name,prod_id,prod_price
FROM Products;

SELECT prod_name,prod_id,prod_price
FROM Products
ORDER BY prod_price,prod_name;

-- 按列位置排序
SELECT prod_name,prod_id,prod_price
FROM Products
ORDER BY 3,1;

-- 指定排序方向
/* 默认升序A-Z 降序需要指定DESC关键字 DESC只对直接位于其前面的列名 DESC=DESCENDING  */
SELECT prod_name,prod_id,prod_price
FROM Products
ORDER BY prod_price,prod_name;

SELECT prod_name,prod_id,prod_price
FROM Products
ORDER BY prod_price DESC,prod_name;

/* 字典排序时A被视为和a相同 */
----------------------------------------------------

----------------------------------------------------
-- 3.6 挑战题
-- 1
SELECT cust_name
FROM Customers
ORDER BY cust_name DESC;

-- 2
SELECT cust_id,order_num
FROM Orders
ORDER BY cust_id,order_date DESC;

-- 3
SELECT quantity,item_price
FROM OrderItems
ORDER BY quantity DESC,item_price DESC;

-- 4
SELECT vend_name
FROM Vendors
ORDER BY vend_name DESC;

/* error版
SELECT vend_name,
FROM Vendors
ORDER vend_name DESC;
*/
----------------------------------------------------

----------------------------------------------------
-- 过滤数据:WHERE

-- 指定条件搜索/过滤
/* 操作符  =  <>  !=  <  <=  !<  >  >=  !>  BETWEEN  IS NULL  */

-- 检查单个值
SELECT prod_name,prod_price
FROM Products;

SELECT prod_name,prod_price
FROM Products
WHERE prod_price=3.49;

/* 同时使用WHERE和ORDER BY时 先WHERE */

-- 不匹配检查：!=  <>
SELECT vend_id,prod_name
FROM Products
WHERE vend_id != 'DLL01';
/* ''用于限定字符串 值与字符串类型进行比较需要'' 和数值比较不需要 */

-- 范围值检查：BETWEEN
SELECT prod_name,prod_price
FROM Products
WHERE prod_price BETWEEN 5 AND 10;

-- 空值检查：IS NULL
/* NULL=no value 与字段包含0、空字符串、仅仅包含空格不同 */ 
----------------------------------------------------

----------------------------------------------------
-- 3.6
-- 1
SELECT prod_id,prod_name
FROM Products
WHERE prod_price=9.49;

-- 2
SELECT prod_id,prod_name
FROM Products
WHERE prod_price>=9;

-- 3
SELECT DISTINCT order_num
FROM OrderItems
WHERE quantity>=100;

-- 4
SELECT prod_name,prod_price
FROM Products
WHERE prod_price BETWEEN 3 AND 6
ORDER BY prod_price;
----------------------------------------------------

----------------------------------------------------
-- 高级数据过滤
-- 组合WHERE子句
/* 逻辑操作符 AND  OR 在求值顺序中 AND优先级高于OR 可以通过()来对操作符分组 */
SELECT prod_name,prod_price
FROM Products
WHERE vend_id = 'DLL01' OR vend_id = 'BRS01' 
      AND prod_price >=10;

SELECT prod_name,prod_price
FROM Products
WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') 
      AND prod_price >=10;

/* IN操作符用来指定条件范围 功能与OR相当 但是执行快更清楚且能包含其他SELECT语句 */
SELECT prod_name,prod_price
FROM Products
WHERE vend_id IN ('DLL01','BRS01') 
ORDER BY prod_name;

/* NOT操作符用来否定其后的任何条件 不单用 可以用在要过滤的列前 */
SELECT prod_name
FROM Products
WHERE NOT vend_id = 'DLL01'
ORDER BY prod_name;
----------------------------------------------------

----------------------------------------------------
-- 5.5
-- 1
SELECT vend_name
FROM Vendors
WHERE vend_country = 'USA' AND vend_state = 'CA';

-- 2
SELECT DISTINCT order_num,prod_id,quantity
FROM OrderItems
WHERE quantity>=100 AND prod_id IN ('BR01','BR02','BR03');

-- 3
SELECT prod_name,prod_price
FROM Products
WHERE prod_price >= 3 AND prod_price <= 6
ORDER BY prod_price;

-- 4
SELECT vend_name
FROM Vendors
WHERE vend_country = 'USA' AND vend_state = 'CA'
ORDER BY vend_name;
/* error版
SELECT vend_name
FROM Vendors
ORDER BY vend_name
WHERE vend_country = 'USA' AND vend_state = 'CA';
*/
----------------------------------------------------

----------------------------------------------------
-- 通配符过滤
/* 通配符：用来匹配值的一部分的特殊字符 搜索模式：由字面值、通配符或两者组合构成的搜索条件 */
/* 操作符作为谓词时不是通配符 */
/* 通配符搜索只能用于字符串（文本字段） 非文本数据类型字段不可以 */

-- LIKE操作符

-- %通配符 表示任意字符出现任意次数
SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE 'Fish%';
/* 搜索以Fish开头的所有产品 */
/* sql server 搜索不区分大小写 */

SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE '%bag%';

SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE 'F%y';
/* 放中间适合查找邮箱地址 */
/* %代表搜索模式中给定位置的0个、1个和多个字符 %不匹配NULL */
/* 请注意用来填补字段的空格 */

-- _通配符 只匹配单个字符
SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE '_ inch teddy bear';

SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE '__ inch teddy bear';

SELECT prod_id,prod_name
FROM Products
WHERE prod_name LIKE '% inch teddy bear';

-- []通配符 用来指定一个字符集 必须匹配指定位置的一个字符
SELECT cust_contact
FROM Customers
ORDER BY cust_contact;

SELECT cust_contact
FROM Customers
WHERE cust_contact LIKE '[JM]%'
ORDER BY cust_contact;

SELECT cust_contact
FROM Customers
WHERE cust_contact LIKE '[^JM]%'
ORDER BY cust_contact;

SELECT cust_contact
FROM Customers
WHERE NOT cust_contact LIKE '[JM]%'
ORDER BY cust_contact;
/* 可以用前缀字符^否定 和 NOT效果相当 */
----------------------------------------------------

----------------------------------------------------
-- 6.4
-- 1
SELECT prod_name,prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%';

-- 2
SELECT prod_name,prod_desc
FROM Products
WHERE NOT prod_desc LIKE '%toy%'
ORDER BY prod_name;

-- 3
SELECT prod_name,prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%' AND prod_desc LIKE '%carrots%';

-- 4
SELECT prod_name,prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%carrots%';
----------------------------------------------------

----------------------------------------------------
-- 创建计算字段
/* 
存储在数据库表中的数据一般不是应用程序所需要的格式 eg. 
 需要显示公司名，同时还需要显示公司的地址，但这两个信息存储在不同的表列中。 
 城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签打印程序需要把它们作为一个有恰当格式的字段检索出来。 
 列数据是大小写混合的，但报表程序需要把所有数据按大写表示出来。 
 物品订单表存储物品的价格和数量，不存储每个物品的总价格（用价格乘以数量即可）。但为打印发票，需要物品的总价格。 
 需要根据表数据进行诸如总数、平均数的计算。 
*/
/* 直接从数据库中检索出转换、计算或格式化过的数据 而不是检索出数据然后再在客户端应用程序中重新格式化 */
/* 计算字段并不实际存在于数据库表中 是运行时在 SELECT 语句内创建的 
基本上与列（column）的意思相同 但数据库列一般称为列 而字段这个术语通常在计算字段这种场合下使用 */

-- 拼接字段：+  ||
SELECT vend_name + '(' + vend_country + ')'
FROM Vendors
ORDER BY vend_name;
/* mysql版
SELECT Concat(vend_name, ' (', vend_country, ')') 
FROM Vendors 
ORDER BY vend_name; 
*/
SELECT RTRIM(vend_name) + '(' + RTRIM(vend_country) + ')'
FROM Vendors
ORDER BY vend_name;
/* RTRIM()函数去除值右边的空格 LTRIM()左边的空格 TRIM()左右两边的空格 */

-- 使用别名：用AS关键字赋予新计算列的名字
SELECT RTRIM(vend_name) + '(' + RTRIM(vend_country) + ')'
 AS vend_title
FROM Vendors
ORDER BY vend_name;
/* 别名的其他用途：包括在实际的表列名包含不合法的字符（如空格）时重新命名它 在原来的名字含混或容易误解时扩充它 */
/* 别名既可以是一个单词 也可以是一个字符串（字符串应该括在引号中） */
/* 别名 = 导出列 */

-- 执行算术计算：+ - * / 
SELECT prod_id,quantity,item_price 
FROM OrderItems 
WHERE order_num = 20008;

SELECT prod_id,quantity,item_price,quantity*item_price AS expanded_price 
FROM OrderItems 
WHERE order_num = 20008; 
/* SELECT 语句为测试、检验函数和计算提供了很好的方法 SELECT省略了FROM子句后就是简单地访问和处理表达式 */
SELECT 3 * 2
SELECT TRIM(' abc ');
SELECT GETDATE()
/* 使用GETDATE函数返回当前日期和时间 */
----------------------------------------------------

----------------------------------------------------
-- 7.5
-- 1
SELECT vend_id,vend_name AS vname,vend_address AS vaddress,vend_city AS vcity
FROM Vendors
ORDER BY vend_name;

-- 2
SELECT prod_id,prod_price,prod_price*0.9 AS sale_price
FROM Products;
----------------------------------------------------

----------------------------------------------------
-- 函数处理数据
-- 函数
/* SQL函数不是可移植的
提取字符串的组成部分：MySQL和SQL Server使用SUBSTRING() 
数据类型转换：MySQL和SQL Server使用CONVERT() 
取当前日期：MySQL使用CURDATE() SQL Server使用GETDATE()
*/
/*  
用于处理文本字符串（如删除或填充值 转换值为大写或小写）的文本函数
用于在数值数据上进行算术操作（如返回绝对值 进行代数运算）的数值函数
用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差 检查日期有效性）的日期和时间函数
用于生成美观好懂的输出内容的格式化函数（如用语言形式表达出日期 用货币符号和千分位表示金额）
返回DBMS正使用的特殊信息（如返回用户登录信息）的系统函数
*/

-- 文本处理函数
SELECT RTRIM(vend_name) + '(' + RTRIM(vend_country) + ')'
FROM Vendors
ORDER BY vend_name;
/* RTRIM()函数去除值右边的空格 LTRIM()左边的空格 TRIM()左右两边的空格 */
SELECT vend_name,UPPER(vend_name) AS vend_name_upcase 
FROM Vendors 
ORDER BY vend_name; 
/* UPPER()将文本转换为大写 LOWER()小写 */
/* LEFT()返回字符串左边的字符 RIGHT()返回字符串右边的字符 */
/* LENGTH()（也使用DATALENGTH()或LEN()）返回字符串的长度 */
/* SUBSTRING()提取字符串的组成部分 */
SELECT cust_name,cust_contact 
FROM Customers 
WHERE cust_contact = 'Michael Green';

SELECT cust_name, cust_contact 
FROM Customers 
WHERE SOUNDEX(cust_contact) = SOUNDEX('Michael Green'); 
/* SOUNDEX() 返回字符串的SOUNDEX值 将任何文本串转换为描述其语音表示的字母数字模式的算法*/

-- 时间日期处理函数
SELECT order_num 
FROM Orders 
WHERE DATEPART(yy, order_date) = 2020; 
/* DATEPART()函数：返回日期的某一部分 ( ,  )两个参数：返回的成分和从中返回成分的日期 */
/* mysql版
SELECT order_num 
FROM Orders 
WHERE YEAR(order_date) = 2020; 
*/

-- 数值处理函数
/*
ABS() 返回一个数的绝对值 
COS() 返回一个角度的余弦 
EXP() 返回一个数的指数值 
PI() 返回圆周率 π 的值 
SIN() 返回一个角度的正弦 
SQRT() 返回一个数的平方根 
TAN() 返回一个角度的正切 
*/
----------------------------------------------------

----------------------------------------------------
-- 8.4
-- 1
SELECT cust_id,cust_name,UPPER(LEFT([cust_contact],2) + LEFT([cust_city],2)) AS user_login
FROM Customers;

-- 2
SELECT order_num,order_date
FROM Orders
WHERE DATEPART(yy, order_date) = 2020 AND DATEPART(mm, order_date) = 1
ORDER BY order_date;
----------------------------------------------------

